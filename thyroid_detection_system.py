# -*- coding: utf-8 -*-
"""Thyroid Detection System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gzzjiNkoA2qeH5PtyMcoPV8A3L5imU-P

# **Import the necessary libraries**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.feature_selection import SelectKBest, f_classif
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression, LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report, confusion_matrix
from sklearn.model_selection import GridSearchCV
from sklearn.datasets import make_classification

"""# **Import the dataset**"""

from google.colab import files
uploaded = files.upload()

"""# **Read the dataset**"""

df = pd.read_csv('/content/Thyroid.csv')
df.head()

"""# **Data Inspection and Exploration**"""

df.duplicated().sum()

# Dropping duplicated rows
df = df.drop_duplicates(keep="first")
df.duplicated().sum()

df.info()

df.isnull().sum()

df.describe()

"""# **Removal of all Unwanted Observations**"""

# Drop Unwanted Columns
col_to_drop = ['Name', 'Email']
df = df.drop(columns=[col for col in col_to_drop if col in df.columns], errors='ignore')
df.shape

# Rounding off values
round((df.isnull().sum()/df.shape[0])*100,2)

# Drop Unwanted Rows
df.dropna(inplace=True)
df.shape

"""# **Check the Categorical and Numerical Columns**"""

# Categorical columns
cat_col = [col for col in df.columns if df[col].dtype == 'object']
print('Categorical columns:',cat_col)

# Numerical columns
num_col = [col for col in df.columns if df[col].dtype != 'object']
print('Numerical columns:',num_col)

df[cat_col].nunique()

"""# **Handle categorical variables (one-hot encoding, label encoding)**"""

# @title **Label Encoding**

le = LabelEncoder()
for col in cat_col:
    df[col] = le.fit_transform(df[col])

df.head()

# Categorical columns
cat_col = [col for col in df.columns if df[col].dtype == 'object']
print('Categorical columns:',cat_col)

# Numerical columns
num_col = [col for col in df.columns if df[col].dtype != 'object']
print('Numerical columns:',num_col)

"""# **Perform Exploratory Data Analysis (EDA)**"""

# Summary statistics
df.describe()

# @title **Data distributions (histograms, box plots)**

# Histogram
df[num_col].hist(figsize=(12, 14))
plt.suptitle("Histograms")
plt.show()

# Box Plot
df[num_col].boxplot(figsize=(14, 6))
plt.title("Box plots")
plt.xticks(rotation=25)
plt.show()

# @title **Drop the Outliers**

# Function to remove outliers using IQR
def remove_outliers_iqr(df):
    for col in df[num_col]:
        Q1 = df[col].quantile(0.1)
        Q3 = df[col].quantile(0.9)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        df = df[(df[col] >= lower_bound) & (df[col] <= upper_bound)]
    return df

# Remove outliers from all numeric columns
df = remove_outliers_iqr(df)

df.info()

# @title **Check Outcomes Proportionality**

#Pie Chart
plt.figure(figsize=(6, 6))
plt.pie(df["Recurred"].value_counts(), labels= ['No Thyroid', 'Thyroid'] , autopct='%1.1f%%', startangle=140)
plt.title('Pie Chart')
plt.show()

# @title **K-Means clustering**

k = 3

clusters = {}
np.random.seed(23)

for idx in range(k):
    center = 2*(2*np.random.random((X.shape[1],))-1)
    points = []
    cluster = {
        'center' : center,
        'points' : []
    }

    clusters[idx] = cluster

clusters

plt.scatter(X[:,0],X[:,1])
plt.grid(True)
for i in clusters:
    center = clusters[i]['center']
    plt.scatter(center[0],center[1],marker = '*',c = 'red')
plt.show()

# @title **Correlation Matrix**

plt.figure(figsize=(12, 8))
sns.heatmap(df.corr(), annot=True, fmt=".2f", linewidths=0.5)
plt.title("Correlation Matrix")
plt.show()

"""# **Feature Selection Techniques**"""

# @title **Standardize Numerical Features**

# Standard Scaler
num_features = [col for col in num_col if col != "Recurred"]

scaler = StandardScaler()
df[num_features] = np.round(scaler.fit_transform(df[num_features]), 2)

df.head()

# @title **Standardize Numerical Features**

# MinMax Scaler
num_features = [col for col in num_col if col != "Recurred"]

scaler = MinMaxScaler()
df[num_features] = np.round(scaler.fit_transform(df[num_features]), 2)

df.head()

# @title **Identify and remove highly correlated features**

corr_matrix = df.corr().abs()
to_drop = []
for col in corr_matrix.columns:
    if col != "Recurred":  # Keep Recurred Column
        if any(corr_matrix[col] > 0.85):
            to_drop.append(col)
print(to_drop)
# As all cols will get dropped we are skipping this step for now

# Drop correlated features
#df = df.drop(columns=to_drop)
#df.shape

df.head()

# @title **Apply feature selection techniques (e.g., SelectKBest, Mutual Information)**

X = df.drop(columns=["Recurred"])
y = df["Recurred"]

# Select top 15 best features
selector = SelectKBest(score_func=f_classif, k=15)
X_new = selector.fit_transform(X, y)

# Get selected feature names
selected_features = X.columns[selector.get_support()]
print("Selected Features:", list(selected_features))

# Update dataframe with selected features + Recurred
df = df[selected_features.tolist() + ["Recurred"]]
print("Shape after feature selection:", df.shape)

df.head()

"""# **Split the dataset into training and testing sets (80-20 or 70-30 split)**"""

X = df.drop(columns=["Recurred"])
y = df["Recurred"]

# 80% training - 20% testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

print("Training Set:", X_train.shape)
print("Testing Set:", X_test.shape)

"""# **Train at least two models**"""

# @title **Decision Tree Model**

# Initialize Decision Tree model
dt_model = DecisionTreeClassifier(random_state=42)
dt_model.fit(X_train, y_train)

# Predict on test set
y_pred_dt = dt_model.predict(X_test)

# Evaluate model
print("Decision Tree Model Accuracy:", accuracy_score(y_test, y_pred_dt))
print("\nClassification Report:\n", classification_report(y_test, y_pred_dt))

# Compute confusion matrix
cm = confusion_matrix(y_test, y_pred_dt)

# Plot confusion matrix
plt.figure(figsize=(6,4))
sns.heatmap(cm, annot=True, fmt="d", cmap="RdPu", xticklabels=["No Thyroid", "Thyroid"], yticklabels=["No Thyroid", "Thyroid"])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

# @title **Random Forest Model**

# Initialize and train Random Forest model
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Predict on test set
y_pred_rf = rf_model.predict(X_test)

# Evaluate model
print("Random Forest Model Accuracy:", accuracy_score(y_test, y_pred_rf))
print("\nClassification Report:\n", classification_report(y_test, y_pred_rf))

# Compute confusion matrix
cm = confusion_matrix(y_test, y_pred_rf)

# Plot confusion matrix
plt.figure(figsize=(6,4))
sns.heatmap(cm, annot=True, fmt="d", cmap="RdPu", xticklabels=["No Thyroid", "Thyroid"], yticklabels=["No Thyroid", "Thyroid"])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

# @title **K-Nearest Neighbors Model (KNN)**

# Initialize and train K-Nearest Neighbors
knn_model = KNeighborsClassifier(n_neighbors=5)
knn_model.fit(X_train, y_train)

# Predict on test set
y_pred_knn = knn_model.predict(X_test)

# Evaluate model
print("K-Nearest Neighbors Model Accuracy:", accuracy_score(y_test, y_pred_knn))
print("\nClassification Report:\n", classification_report(y_test, y_pred_knn))

# Compute confusion matrix
cm = confusion_matrix(y_test, y_pred_knn)

# Plot confusion matrix
plt.figure(figsize=(6,4))
sns.heatmap(cm, annot=True, fmt="d", cmap="RdPu", xticklabels=["No Thyroid", "Thyroid"], yticklabels=["No Thyroid", "Thyroid"])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

# @title **Support Vector Machine Model (SVM)**

# Initialize and train Support Vector Machine model
svm_model = SVC(kernel='linear', random_state=42)
svm_model.fit(X_train, y_train)

# Predict on test set
y_pred_svm = svm_model.predict(X_test)

# Evaluate model
print("Support Vector Machine Model Accuracy:", accuracy_score(y_test, y_pred_svm))
print("\nClassification Report:\n", classification_report(y_test, y_pred_svm))

# Compute confusion matrix
cm = confusion_matrix(y_test, y_pred_svm)

# Plot confusion matrix
plt.figure(figsize=(6,4))
sns.heatmap(cm, annot=True, fmt="d", cmap="RdPu", xticklabels=["No Thyroid", "Thyroid"], yticklabels=["No Thyroid", "Thyroid"])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

# @title **Logistic Regression Model**

# Initialize and train Logistic Regression model
logistic_model = LogisticRegression(random_state=42)
logistic_model.fit(X_train, y_train)

# Predict on test set
y_pred_logistic = logistic_model.predict(X_test)

# Evaluate model
print("Logistic Regression Model Accuracy:", accuracy_score(y_test, y_pred_logistic))
print("\nClassification Report:\n", classification_report(y_test, y_pred_logistic))

# Compute confusion matrix
cm = confusion_matrix(y_test, y_pred_logistic)

# Plot confusion matrix
plt.figure(figsize=(6,4))
sns.heatmap(cm, annot=True, fmt="d", cmap="RdPu", xticklabels=["No Thyroid", "Thyroid"], yticklabels=["No Thyroid", "Thyroid"])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

# @title **Linear Regression Model**

# Initialize and train Linear Regression model
linear_model = LinearRegression()
linear_model.fit(X_train, y_train)

# Predict on test set
y_pred_linear = linear_model.predict(X_test)

# Evaluate model using regression metrics
mse = mean_squared_error(y_test, y_pred_linear)
r2 = r2_score(y_test, y_pred_linear)

print("Mean Squared Error (MSE):", mse)
print("R-squared (R²) Score:", r2)

# @title **Tune Decision Tree Using GridSearchCV**

X, y = make_classification(n_samples=1000, n_features=20, n_informative=15, n_redundant=5, random_state=42)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define parameter grid
param_grid = {
    'n_estimators': [50, 100, 200],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4],
    'bootstrap': [True, False]
}

# Initialize Decision Tree model
dt = DecisionTreeClassifier(random_state=42)

# Initialize GridSearchCV
rf_model = RandomForestClassifier(random_state=42)
grid_search = GridSearchCV(estimator=rf_model, param_grid=param_grid, cv=2, verbose=2, n_jobs=-1)

# Train the model with GridSearchCV
grid_search.fit(X_train, y_train)

# Get the best model
best_rf_model = grid_search.best_estimator_

# Predict on test set
y_pred_rf_grid = best_rf_model.predict(X_test)

# Evaluate model
print("GridSearchCV Best Parameters:", grid_search.best_params_)
print("GridSearchCV Best Score:", grid_search.best_score_)
print("GridSearchCV Test Accuracy:", accuracy_score(y_test, y_pred_rf_grid))
print("\nClassification Report:\n", classification_report(y_test, y_pred_rf_grid))

# Compute confusion matrix
cm = confusion_matrix(y_test, y_pred_rf_grid)

# Plot confusion matrix
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt="d", cmap="RdPu", xticklabels=["No Thyroid", "Thyroid"], yticklabels=["No Thyroid", "Thyroid"])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("GridSearchCV Confusion Matrix")
plt.show()

print("\nLogistic Regression:")
print("Accuracy:", accuracy_score(y_test, y_pred_rf))
print("Precision:", precision_score(y_test, y_pred_rf))
print("Recall:", recall_score(y_test, y_pred_rf))
print("F1-score:", f1_score(y_test, y_pred_rf))
print("\nClassification Report:\n", classification_report(y_test, y_pred_rf))